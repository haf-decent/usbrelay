"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toggle = exports.resetOn = exports.resetOff = exports.status = void 0;
var startCmd = [0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30];
var endCmd = [0x0D, 0x0A];
// const statusCmd = Buffer.from([ 0x3A, 0x46, 0x45, 0x30, 0x31, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x46, 0x46, ...endCmd ]);
var status = Buffer.from(__spreadArray([0x3A, 0x46, 0x45, 0x30, 0x31, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x46, 0x46], endCmd, true));
exports.status = status;
var resetOff = Buffer.from(__spreadArray([0x3A, 0x46, 0x45, 0x30, 0x46, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x45, 0x31], endCmd, true));
exports.resetOff = resetOff;
var resetOn = Buffer.from(__spreadArray([0x3A, 0x46, 0x45, 0x30, 0x46, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x32, 0x46, 0x46, 0x46, 0x46, 0x45, 0x33], endCmd, true));
exports.resetOn = resetOn;
var toggle = [
    { off: [0x30, 0x30, 0x30, 0x30, 0x30, 0x46, 0x44], on: [0x30, 0x46, 0x46, 0x30, 0x30, 0x46, 0x45] },
    { off: [0x31, 0x30, 0x30, 0x30, 0x30, 0x46, 0x43], on: [0x31, 0x46, 0x46, 0x30, 0x30, 0x46, 0x44] },
    { off: [0x32, 0x30, 0x30, 0x30, 0x30, 0x46, 0x42], on: [0x32, 0x46, 0x46, 0x30, 0x30, 0x46, 0x43] },
    { off: [0x33, 0x30, 0x30, 0x30, 0x30, 0x46, 0x41], on: [0x33, 0x46, 0x46, 0x30, 0x30, 0x46, 0x42] },
    { off: [0x34, 0x30, 0x30, 0x30, 0x30, 0x46, 0x39], on: [0x34, 0x46, 0x46, 0x30, 0x30, 0x46, 0x41] },
    { off: [0x35, 0x30, 0x30, 0x30, 0x30, 0x46, 0x38], on: [0x35, 0x46, 0x46, 0x30, 0x30, 0x46, 0x39] },
    { off: [0x36, 0x30, 0x30, 0x30, 0x30, 0x46, 0x37], on: [0x36, 0x46, 0x46, 0x30, 0x30, 0x46, 0x38] },
    { off: [0x37, 0x30, 0x30, 0x30, 0x30, 0x46, 0x36], on: [0x37, 0x46, 0x46, 0x30, 0x30, 0x46, 0x37] },
    { off: [0x38, 0x30, 0x30, 0x30, 0x30, 0x46, 0x35], on: [0x38, 0x46, 0x46, 0x30, 0x30, 0x46, 0x36] },
    { off: [0x39, 0x30, 0x30, 0x30, 0x30, 0x46, 0x34], on: [0x39, 0x46, 0x46, 0x30, 0x30, 0x46, 0x35] },
    { off: [0x41, 0x30, 0x30, 0x30, 0x30, 0x46, 0x33], on: [0x41, 0x46, 0x46, 0x30, 0x30, 0x46, 0x34] },
    { off: [0x42, 0x30, 0x30, 0x30, 0x30, 0x46, 0x32], on: [0x42, 0x46, 0x46, 0x30, 0x30, 0x46, 0x33] },
    { off: [0x43, 0x30, 0x30, 0x30, 0x30, 0x46, 0x31], on: [0x43, 0x46, 0x46, 0x30, 0x30, 0x46, 0x32] },
    { off: [0x44, 0x30, 0x30, 0x30, 0x30, 0x46, 0x30], on: [0x44, 0x46, 0x46, 0x30, 0x30, 0x46, 0x31] },
    { off: [0x45, 0x30, 0x30, 0x30, 0x30, 0x46, 0x46], on: [0x45, 0x46, 0x46, 0x30, 0x30, 0x46, 0x30] },
    { off: [0x46, 0x30, 0x30, 0x30, 0x30, 0x46, 0x45], on: [0x46, 0x46, 0x46, 0x30, 0x30, 0x46, 0x46] }
].map(function (_a) {
    var off = _a.off, on = _a.on;
    return ([
        Buffer.from(__spreadArray(__spreadArray(__spreadArray([], startCmd, true), off, true), endCmd, true)),
        Buffer.from(__spreadArray(__spreadArray(__spreadArray([], startCmd, true), on, true), endCmd, true))
    ]);
});
exports.toggle = toggle;
